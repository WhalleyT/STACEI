ylab("Count")+
theme(legend.position="none")
tajima <- read.csv("tajima.txt", sep = "\t")
View(tajima)
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
View(tajima)
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("SeqID" = "V1"))
View(loctree)
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
View(loctree)
library(monocle3)
install.packages("monocle3")
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %<%
filter(V2 > 2.5)
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %>%
filter(V2 > 2.5)
unique(loctree$Localization)
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %>%
filter(V2 > 2.5) %>%
filter(Localization %in% c("OuterMembrane", "Extracellular"))
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %>%
filter(V2 > 2.5) %>%
filter(Localization %in% c("OuterMembrane", "Extracellular"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggridges)
library(reshape2)
matrix        <- read.table("ecoli_out/gene_presence_absence.Rtab", header=TRUE, row.names = 1)
presence_pcnt <- rowSums(matrix) / ncol(matrix) * 100
core <- data.frame(rownames(matrix), presence_pcnt)
colnames(core) <- c("gene", "presence")
pcnt <- c(15, 95, 99, 100)
labe <- c("Cloud", "Shell", "Soft Core", "Core")
core <- core %>%
mutate(group = ifelse(presence >= 99, "Core",
ifelse(presence >= 95, "Soft Core",
ifelse(presence >= 15, "Shell", "Cloud"))))
core_count <- core %>%
group_by(group) %>% tally()
ggplot(core_count, aes(x=reorder(group, -n), y=n, fill=group))+
geom_bar(stat = "identity")+
theme_classic()+
xlab("Pangenome Group")+
ylab("Count")+
theme(legend.position="none")
loctree <- read.csv("psort.txt", sep = "\t")
#get only core
core_only <- core[core$group == "Core",]
loctree$SeqID <- trimws(loctree$SeqID, which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
loctree   <- left_join(core_only, loctree, by = c("gene" = "SeqID"))
loctree_count <- loctree %>%
group_by(Localization) %>% tally()
ggplot(loctree_count, aes(x=reorder(Localization, -n), y=n, fill=Localization))+
geom_bar(stat = "identity")+
theme_classic()+
xlab("Subcellular location")+
ylab("Count")+
theme(legend.position="none")
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %>%
filter(V2 > 2.5) %>%
filter(Localization %in% c("OuterMembrane", "Extracellular"))
write.csv("genes.txt", loctree$gene)
write.csv(loctree$gene, "genes.txt")
write.csv(loctree$gene, "/mnt/e/vaccine/ecoli_out/genes.txt")
write.csv(loctree$gene, "E:\PhD/vaccine/ecoli_out/genes.txt")
write.csv(loctree$gene, "E:/PhD/vaccine/ecoli_out/genes.txt")
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %<>%
filter(V2 > 2.5) %>%
filter(Localization %in% c("OuterMembrane", "Extracellular"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggridges)
library(reshape2)
matrix        <- read.table("ecoli_out/gene_presence_absence.Rtab", header=TRUE, row.names = 1)
presence_pcnt <- rowSums(matrix) / ncol(matrix) * 100
core <- data.frame(rownames(matrix), presence_pcnt)
colnames(core) <- c("gene", "presence")
pcnt <- c(15, 95, 99, 100)
labe <- c("Cloud", "Shell", "Soft Core", "Core")
core <- core %>%
mutate(group = ifelse(presence >= 99, "Core",
ifelse(presence >= 95, "Soft Core",
ifelse(presence >= 15, "Shell", "Cloud"))))
core_count <- core %>%
group_by(group) %>% tally()
ggplot(core_count, aes(x=reorder(group, -n), y=n, fill=group))+
geom_bar(stat = "identity")+
theme_classic()+
xlab("Pangenome Group")+
ylab("Count")+
theme(legend.position="none")
loctree <- read.csv("psort.txt", sep = "\t")
#get only core
core_only <- core[core$group == "Core",]
loctree$SeqID <- trimws(loctree$SeqID, which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
loctree   <- left_join(core_only, loctree, by = c("gene" = "SeqID"))
loctree_count <- loctree %>%
group_by(Localization) %>% tally()
ggplot(loctree_count, aes(x=reorder(Localization, -n), y=n, fill=Localization))+
geom_bar(stat = "identity")+
theme_classic()+
xlab("Subcellular location")+
ylab("Count")+
theme(legend.position="none")
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %<>%
filter(V2 > 2.5) %>%
filter(Localization %in% c("OuterMembrane", "Extracellular"))
write.csv(loctree$gene, "E:/PhD/vaccine/ecoli_out/genes.txt")
write.csv(loctree, "E:/PhD/vaccine/ecoli_out/safe.csv")
mhci <- read.csv("mhc_i_binders.txt", sep = "\t")
tajima <- read.csv("tajima.txt", sep = "\t", header = FALSE)
tajima$V1 <- gsub("ecoli_out/pan_genome_sequences/", "", tajima$V1)
tajima$V1 <- gsub(".fa.aln", "", tajima$V1)
loctree <- left_join(loctree, tajima, by = c("gene" = "V1"))
loctree %<>%
filter(V2 > 2.5) %>%
filter(Localization %in% c("OuterMembrane", "Extracellular"))
View(mhci)
View(loctree)
mhci  <- read.csv("mhc_i_binders.txt", sep = "\t")
mhcii <- read.csv("mhc_ii_binders.txt", sep = "\t")
bcell <- read.csv("summary_5EAC2BE20000177475925585.csv")
View(bcell)
mhci  <- read.csv("mhc_i_binders.txt", sep = "\t")
mhcii <- read.csv("mhc_ii_binders.txt", sep = "\t")
bcell <- read.csv("summary_5EAC2BE20000177475925585.csv")
bcell %<>%
group_by(Entry) %>%
summarize(good_binders_bcr = sum(EpitopeProbability > 0.5))
View(bcell)
loctree
View(mhci)
bcell
mhci  <- read.csv("mhc_i_binders.txt", sep = "\t")
mhcii <- read.csv("mhc_ii_binders.txt", sep = "\t")
bcell <- read.csv("summary_5EAC2BE20000177475925585.csv")
bcell %<>%
group_by(Entry) %>%
summarize(good_binders_bcr = sum(EpitopeProbability > 0.5))
loctree <- left_join(loctree, mhci, by = c("gene" = "gene"))
loctree <- left_join(loctree, mhcii, by = c("gene" = "gene"))
loctree <- left_join(loctree, bcell, by = c("gene" = "Entry"))
View(loctree)
library(readr)
write_csv(loctree, "output.csv")
write_csv(loctree, "E:/PhD/vaccine/ecoli_out/output.csv")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
BiocManager::install("monocle")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
seurat_object <- readRDS('pbmc.rds')
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
BiocManager::install("clusterProfiler")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
seurat_object <- readRDS('pbmc.rds')
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
seurat_object <- readRDS('pbmc.rds')
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
library(dplyr)
library(clusterProfiler)
install.packages()
install.packages("installr")
library(installr)
updateR()
install.packages("Seurat")
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
install.packages("BiocManager")
BiocManager::install("monocle")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
BiocManager::install("clusterProfiler")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
library(knitr)
library(kableExtra)
pbmc.data <- Read10X("~/myfiles/ML/scRNA-seq/filtered_gene_bc_matrices/hg19")
pbmc.data <- Read10X("filtered_gene_bc_matrices/hg19")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
pbmc.data <- Read10X("filtered_gene_bc_matrices/hg19")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
#grep the mitochondrial genes, which start with mt-
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
#Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,
pt.size = 0.05)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
print(plot1)
LabelPoints(plot = plot1, points = top10, repel = TRUE)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca", nfeatures = 20)
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
reticulate::py_install(packages =
# 'umap-learn')
)
reticulate::py_install(packages ='umap-learn')
install.packages("umap")
install.packages("uwot")
install.packages("uwot")
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages ='umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
x <- RunUMAP(pbmc, dims = 1:10, n.neighbors = 5)
DimPlot(x, reduction = "umap", no.legend = TRUE)
# find all markers of cluster 1
cluster1.markers <- FindMarkers(pbmc, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(2, avg_logFC)
cluster1.markers <- FindMarkers(pbmc, ident.1 = 0, thresh.use = 0.25, test.use = "roc",only.pos = T)
VlnPlot(pbmc, features = c("MS4A1","CD79A"))
clusters <- readRDS("filtered_gene_bc_matrices/hg19/cells.Rds")
kable(clusters) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
clusters <- readRDS("filtered_gene_bc_matrices/hg19/cells.Rds")
kable(clusters) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
kable(clusters) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
kable(clusters) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
new.cluster.ids <- c("Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
#split them into positive and negative, where LFC >2 and p < 0.05
cd8 <- FindMarkers(pbmc, "CD8 T", min.pct = 0.25, thresh.use = 0.25)
cd8$gene <- rownames(cd8)
pos <- cd8 %>% filter(avg_logFC >=0.5)
#convert to ensembl id so we can access the database
pos <- bitr(pos$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
library(knitr)
library(org.Hs.eg.db)
library(kableExtra)
#split them into positive and negative, where LFC >2 and p < 0.05
cd8 <- FindMarkers(pbmc, "CD8 T", min.pct = 0.25, thresh.use = 0.25)
cd8$gene <- rownames(cd8)
pos <- cd8 %>% filter(avg_logFC >=0.5)
#convert to ensembl id so we can access the database
pos <- bitr(pos$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
GO_pos    <- enrichGO(gene  = pos$ENTREZID, OrgDb = "org.Hs.eg.db",
ont = "BP", pAdjustMethod = "BH", pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
dotplot(GO_pos)
neg <- cd8 %>% filter(avg_logFC <=0.5)
#convert to ensembl id so we can access the database
neg <- bitr(neg$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
GO_neg    <- enrichGO(gene  = neg$ENTREZID, OrgDb = "org.Hs.eg.db",
ont = "BP", pAdjustMethod = "BH", pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
dotplot(GO_neg)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
seurat_object <- readRDS('pbmc.rds')
saveRDS(pbmc, "pbmc.rds")
seurat_object <- readRDS('pbmc.rds')
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(monocle)
library(clusterProfiler)
library(knitr)
library(org.Hs.eg.db)
library(kableExtra)
pbmc.data <- Read10X("filtered_gene_bc_matrices/hg19")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
#grep the mitochondrial genes, which start with mt-
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
#Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,
pt.size = 0.05)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
seurat_object <- readRDS('pbmc.rds')
seurat_object
seurat_object@assays$RNA
seurat_object@assays$RNA@scale.data
seurat_object@assays$RNA@data
#Extract data, phenotype data, and feature data from the SeuratObject
data <- as(as.matrix(seurat_object@assays$RNA@data), 'sparseMatrix')
pd <- new('AnnotatedDataFrame', data = seurat_object@meta.data)
fData <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fData)
#Construct monocle cds
HSMM <- newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = gaussianff())
HSMM <- reduceDimension(HSMM, max_components = 2, num_dim = 10,
reduction_method = 'tSNE', verbose = T)
HSMM <- reduceDimension(HSMM, max_components = 2, num_dim = 10,
reduction_method = 'tSNE', verbose = T)
?reduceDimension
HSMM <- reduceDimension(HSMM, max_components = 2, num_dim = 10,
reduction_method = 'tSNE', verbose = T, norm_method = "none")
HSMM <- clusterCells(HSMM, num_clusters = 8)
plot_cell_clusters(HSMM, 1, 2, color = "CellType",
markers = c("IL7R", "CCR7", "IL7R", "S100A4", "CD14", "LYZ",
"MS4A1", "CD8A", 	"CD8", "FCGR3A", "MS4A7", "FCGR3A",
"GNLY", "NKG7", "FCER1A", "CST3", "PPBP"))
#and plot by our cell types
plot_cell_clusters(HSMM, 1, 2, color = "seurat_clusters")
plot_cell_clusters(HSMM, 1, 2, color = "Cluster")
#get our marker genes
markers <- c("IL7R", "CCR7", "IL7R", "S100A4", "CD14", "LYZ",
"MS4A1", "CD8A", 	"CD8", "FCGR3A", "MS4A7", "FCGR3A",
"GNLY", "NKG7", "FCER1A", "CST3", "PPBP")
HSMM <- setOrderingFilter(HSMM, markers)
HSMM <- reduceDimension(HSMM, max_components = 2,
method = 'DDRTree')
HSMM <- reduceDimension(HSMM, max_components = 2,
method = 'DDRTree', norm_method = "none")
HSMM <- orderCells(HSMM)
plot_cell_trajectory(HSMM, color_by = "seurat_clusters")
BSA <- read.table("E:\PhD/stacei_git/STACEI/5men/buried_surface/5men_peptide_pisa_chains.txt")
BSA <- read.table("E:/PhD/stacei_git/STACEI/5men/buried_surface/5men_peptide_pisa_chains.txt")
BSA
BSA  %>% filter(Acceptor == "MHCa")
library("dplyr")
BSA  %>% filter(Acceptor == "MHCa")
BSA  %>% filter(Acceptor == "MHCa" | Acceptor == "MHCb")
View(BSA)
BSA$No
#graphs peptide BSA
library("ggplot2")
library("dplyr")
#print(getwd())
args <- commandArgs(TRUE)
BSA <- read.table(args[1])
BSA$peptide <- "peptide"
BSA  %<>%
filter(Acceptor == "MHCa" | Acceptor == "MHCb") %>%
group_by(No) %>%
dplyr::summarize(mean_avail = mean(Availability, na.rm=TRUE))
View(BSA)
ggplot(data = BSA, aes(x = No, y = mean_avail, fill = peptide))+
geom_bar(stat = "identity")+
theme_classic()+
scale_x_continuous(breaks = round(seq(min(BSA$No), max(BSA$No), by = 1),1))+
theme(legend.position="none")+
ggtitle("Availability of peptide in bound pMHC")+
xlab("Residue No.")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values = c("peptide" = "#FFFF00"))
BSA  %<>%
filter(Acceptor == "MHCa" | Acceptor == "MHCb") %>%
group_by(No) %>%
dplyr::summarize(mean_avail = mean(Availability, na.rm=TRUE))
BSA$peptide <- "peptide"
ggplot(data = BSA, aes(x = No, y = mean_avail, fill = peptide))+
geom_bar(stat = "identity")+
theme_classic()+
scale_x_continuous(breaks = round(seq(min(BSA$No), max(BSA$No), by = 1),1))+
theme(legend.position="none")+
ggtitle("Availability of peptide in bound pMHC")+
xlab("Residue No.")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values = c("peptide" = "#FFFF00"))
ggsave("BSA.png", plot = last_plot())
write.table(BSA[,5], "peptide_BSA_piped.txt", sep="\t",
row.names = FALSE, quote = FALSE,
col.names = FALSE)
library(dplyr)
data(mtcars)
mtcars
mtcars %>%
group_by(gear) %>%
summarise_each(funs(na.omit))
library(dplyr)
data(mtcars)
mtcars %>%
group_by(gear) %>%
summarise(wt = paste(wt, collapse=" "))
install.packages(c("circlize", "wesanderson"))
install.packages("shiny")
shiny::runApp('E:/PhD/stacei_git/STACEI/shiny/cdr_loops')
runApp()
setwd("E:\PhD/stacei_git/STACEI/shiny/cdr_loops/")
setwd("E:\\PhD/stacei_git/STACEI/shiny/cdr_loops/")
getwd()
runApp()
runApp()
getwd()
runApp()
