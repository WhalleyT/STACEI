#' @import DT
#' @import R.utils
#' @importFrom shinyjs enable disable toggle info onclick hide show
#' @importFrom shinyBS addPopover
#' @importFrom shiny runApp
#' @importFrom Biostrings readAAStringSet AAStringSet
#' @importFrom utils data
#' @export
#'
install.packages("epitomeSim", repos = NULL, type="source")
launch_EPItOMeSim <- function(){
appDir <- system.file("EPItOMe-app", package = "epitomeSim")
print(system.file("EPItOMe-app", package = "epitomeSim"))
if (appDir == "") {
stop("Unable to launch INfORM Shiny interface, please check installation!.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
launch_EPItOMeSim()
setwd("/media/tom/Tom_3TB_HDD_remo/T-cell_clone_RNA-seq/gene_expression")
library(ggplot2)
library(reshape2)
library(superheat)
library(factoextra)
library(NMF)
library(MKmisc)
library(gtools)
library(biomaRt)
library(ReactomePA)
#read in
normalised  <- read.table("gene_FPKQ_Cardiff.txt", header = TRUE)
gene_counts <- read.table("gene_Counts_Cardiff.txt", header = TRUE)
groups      <- colnames(normalised)[2:ncol(normalised)]
#Boxplot just to see what's going on
melt <- melt(normalised)
colnames(melt) <- c("ID", "clone", "FPKQ")
ggplot(melt, aes(x=clone, y=log2(FPKQ)))+
geom_boxplot(aes(fill=clone))
#Heatmap for a bit of a look
normalised_data <- normalised[,2:6]
normalised_gene <- normalised[,1]
#PCA
res.pca <- prcomp(as.data.frame(t(normalised_data)))
fviz_eig(res.pca)
pca_mat <- as.data.frame(res.pca$x)
pca_mat$clone <- rownames(pca_mat)
ggplot(pca_mat, aes(x=PC1, y=PC2, color=clone))+
geom_point()
#distance matrix
dist_mat <- as.matrix(dist(t(as.matrix(normalised_data)), method = "euclidean"))
superheat(dist_mat)
#density of reads
ggplot(melt, aes(log2(FPKQ), fill = clone, colour = clone)) +
geom_density(alpha = 0.1)
#remove full zeros
nozero_data <- normalised_data[rowSums(normalised_data) > 0,]
superheat(as.data.frame(nozero_data))
normalised$average <- rowSums(normalised[,2:6]) / 5
#plot normalised average distribution
ggplot(normalised, aes(log2(average), fill=average, color=average))+
geom_density(alpha=1)
setwd("/media/tom/Tom_3TB_HDD_remo/T-cell_clone_RNA-seq/gene_expression")
library(ggplot2)
library(reshape2)
library(superheat)
library(factoextra)
#read in
normalised  <- read.table("gene_FPKQ_Cardiff.txt", header = TRUE)
gene_counts <- read.table("gene_Counts_Cardiff.txt", header = TRUE)
groups      <- colnames(normalised)[2:ncol(normalised)]
#Boxplot just to see what's going on
melt <- melt(normalised)
colnames(melt) <- c("ID", "clone", "FPKQ")
ggplot(melt, aes(x=clone, y=log2(FPKQ)))+
geom_boxplot(aes(fill=clone))
#Heatmap for a bit of a look
normalised_data <- normalised[,2:6]
normalised_gene <- normalised[,1]
#PCA
res.pca <- prcomp(as.data.frame(t(normalised_data)))
fviz_eig(res.pca)
pca_mat <- as.data.frame(res.pca$x)
pca_mat$clone <- rownames(pca_mat)
ggplot(pca_mat, aes(x=PC1, y=PC2, color=clone))+
geom_point()
#distance matrix
dist_mat <- as.matrix(dist(t(as.matrix(normalised_data)), method = "euclidean"))
superheat(dist_mat)
#density of reads
ggplot(melt, aes(log2(FPKQ), fill = clone, colour = clone)) +
geom_density(alpha = 0.1)
#remove full zeros
nozero_data <- normalised_data[rowSums(normalised_data) > 0,]
superheat(as.data.frame(nozero_data))
normalised$average <- rowSums(normalised[,2:6]) / 5
#plot normalised average distribution
ggplot(normalised, aes(log2(average), fill=average, color=average))+
geom_density(alpha=1)
setwd("~/PycharmProjects/STACEI/coeliac")
library("ggplot2")
library("dplyr")
files <- Sys.glob("*TCR_to_pMHC_contacts_clean.txt")
# okay, so alex specifically needs ratio of CDR2a:CDR2b, but it's probably easiest to just
# do it by all CDR to pmhc and group the subsets
datalist = list()
for(f in 1:length(files))
{
df            <- read.table(files[f], row.names = NULL, header = TRUE, sep = "\t")
name          <- gsub("_TCR_to_pMHC_contacts_clean.txt", "", files[f])
df$name       <- name
datalist[[f]] <- df
}
#tidy columns
meta_contacts           <- do.call(rbind, datalist)
cols                    <- colnames(meta_contacts)
meta_contacts$row.names <- NULL
meta_contacts$Type      <- NULL
colnames(meta_contacts) <- cols[3:length(cols)]
#count
counts <- meta_contacts %>%
group_by(name, Donor_Annotation, Acceptor_Chain, Type) %>%
tally
#make sure it's peptide only and no non-cdrs
#counts <- counts[counts$Acceptor_Chain == "peptide",]
counts <- counts[counts$Donor_Annotation != "",]
counts <- counts[!is.na(counts$Donor_Annotation),]
#order cdrloops for plot
counts$Donor_Annotation <- factor(counts$Donor_Annotation,
levels=c("CDR1a", "CDR1b", "CDR2a", "CDR2b",
"CDR3a", "CDR3b", "FWa", "FWb"))
ggplot(counts, aes(x = `Donor_Annotation`, y = n, fill = Type))+
geom_bar(stat = "identity")+
ggtitle("Contact contribution of CDR loops")+
theme(plot.title = element_text(hjust = 0.5),
legend.title.align=  0.5)+
scale_fill_brewer(palette = "Set2")+
facet_grid(name ~ Acceptor_Chain)
ggplot(counts, aes(x = `Donor_Annotation`, y = n, fill = Acceptor_Chain))+
geom_bar(stat = "identity")+
ggtitle("Contact contribution of CDR loops")+
theme(plot.title = element_text(hjust = 0.5),
legend.title.align=  0.5)+
scale_fill_brewer(palette = "Set2")+
facet_wrap(~ name, ncol=2)
#count based on residue too
rescounts <- meta_contacts %>%
group_by(name, Donor_Annotation, Acceptor_Chain,
Type, Donor_ResNum) %>%
tally
setwd("~/PycharmProjects/STACEI/coeliac")
library("ggplot2")
library("dplyr")
files <- Sys.glob("*TCR_to_pMHC_contacts_clean.txt")
# okay, so alex specifically needs ratio of CDR2a:CDR2b, but it's probably easiest to just
# do it by all CDR to pmhc and group the subsets
datalist = list()
for(f in 1:length(files))
{
df            <- read.table(files[f], row.names = NULL, header = TRUE, sep = "\t")
name          <- gsub("_TCR_to_pMHC_contacts_clean.txt", "", files[f])
df$name       <- name
datalist[[f]] <- df
}
#tidy columns
meta_contacts           <- do.call(rbind, datalist)
cols                    <- colnames(meta_contacts)
meta_contacts$row.names <- NULL
meta_contacts$Type      <- NULL
colnames(meta_contacts) <- cols[3:length(cols)]
#count
counts <- meta_contacts %>%
group_by(name, Donor_Annotation, Acceptor_Chain, Type) %>%
tally
#make sure it's peptide only and no non-cdrs
#counts <- counts[counts$Acceptor_Chain == "peptide",]
counts <- counts[counts$Donor_Annotation != "",]
counts <- counts[!is.na(counts$Donor_Annotation),]
#order cdrloops for plot
counts$Donor_Annotation <- factor(counts$Donor_Annotation,
levels=c("CDR1a", "CDR1b", "CDR2a", "CDR2b",
"CDR3a", "CDR3b", "FWa", "FWb"))
ggplot(counts, aes(x = `Donor_Annotation`, y = n, fill = Type))+
geom_bar(stat = "identity")+
ggtitle("Contact contribution of CDR loops")+
theme(plot.title = element_text(hjust = 0.5),
legend.title.align=  0.5)+
scale_fill_brewer(palette = "Set2")+
facet_grid(name ~ Acceptor_Chain)
ggplot(counts, aes(x = `Donor_Annotation`, y = n, fill = Acceptor_Chain))+
geom_bar(stat = "identity")+
ggtitle("Contact contribution of CDR loops")+
theme(plot.title = element_text(hjust = 0.5),
legend.title.align=  0.5)+
scale_fill_brewer(palette = "Set2")+
facet_wrap(~ name, ncol=2)
#count based on residue too
rescounts <- meta_contacts %>%
group_by(name, Donor_Annotation, Acceptor_Chain,
Type, Donor_ResNum) %>%
tally
setwd("~/PycharmProjects/STACEI/coeliac")
library("ggplot2")
library("dplyr")
files <- Sys.glob("*TCR_to_pMHC_contacts_clean.txt")
# okay, so alex specifically needs ratio of CDR2a:CDR2b, but it's probably easiest to just
# do it by all CDR to pmhc and group the subsets
datalist = list()
for(f in 1:length(files))
{
df            <- read.table(files[f], row.names = NULL, header = TRUE, sep = "\t")
name          <- gsub("_TCR_to_pMHC_contacts_clean.txt", "", files[f])
df$name       <- name
datalist[[f]] <- df
}
#tidy columns
meta_contacts           <- do.call(rbind, datalist)
cols                    <- colnames(meta_contacts)
meta_contacts$row.names <- NULL
meta_contacts$Type      <- NULL
colnames(meta_contacts) <- cols[3:length(cols)]
#count
counts <- meta_contacts %>%
group_by(name, Donor_Annotation, Acceptor_Chain, Type) %>%
tally
#make sure it's peptide only and no non-cdrs
#counts <- counts[counts$Acceptor_Chain == "peptide",]
counts <- counts[counts$Donor_Annotation != "",]
counts <- counts[!is.na(counts$Donor_Annotation),]
#order cdrloops for plot
counts$Donor_Annotation <- factor(counts$Donor_Annotation,
levels=c("CDR1a", "CDR1b", "CDR2a", "CDR2b",
"CDR3a", "CDR3b", "FWa", "FWb"))
ggplot(counts, aes(x = `Donor_Annotation`, y = n, fill = Type))+
geom_bar(stat = "identity")+
ggtitle("Contact contribution of CDR loops")+
theme(plot.title = element_text(hjust = 0.5),
legend.title.align=  0.5)+
scale_fill_brewer(palette = "Set2")+
facet_grid(name ~ Acceptor_Chain)
ggplot(counts, aes(x = `Donor_Annotation`, y = n, fill = Acceptor_Chain))+
geom_bar(stat = "identity")+
ggtitle("Contact contribution of CDR loops")+
theme(plot.title = element_text(hjust = 0.5),
legend.title.align=  0.5)+
scale_fill_brewer(palette = "Set2")+
facet_wrap(~ name, ncol=2)
#count based on residue too
rescounts <- meta_contacts %>%
group_by(name, Donor_Annotation, Acceptor_Chain,
Type, Donor_ResNum) %>%
tally
if (!require("pacman")) install.packages("pacman")
install.packages("pacman")
pacman::p_load(ggplot2, reshape2, superheat, factoextra)
"pacman" %in% installed.packages()
setwd("/media/tom/Tom_3TB_HDD_remo/T-cell_clone_RNA-seq/gene_expression")
install.packages("pacman")
if("pacman" %in% installed.packages()){
library(pacman)
}else{
install.packages("pacman")
library(pacman)
}
pacman::p_load(ggplot2, reshape2, superheat, factoextra)
#read in
normalised  <- read.table("gene_FPKQ_Cardiff.txt", header = TRUE)
gene_counts <- read.table("gene_Counts_Cardiff.txt", header = TRUE)
groups      <- colnames(normalised)[2:ncol(normalised)]
#Boxplot just to see what's going on
melt <- melt(normalised)
colnames(melt) <- c("ID", "clone", "FPKQ")
ggplot(melt, aes(x=clone, y=log2(FPKQ)))+
geom_boxplot(aes(fill=clone))
#Heatmap for a bit of a look
normalised_data <- normalised[,2:6]
normalised_gene <- normalised[,1]
#PCA
res.pca <- prcomp(as.data.frame(t(normalised_data)))
fviz_eig(res.pca)
pca_mat <- as.data.frame(res.pca$x)
pca_mat$clone <- rownames(pca_mat)
ggplot(pca_mat, aes(x=PC1, y=PC2, color=clone))+
geom_point()
#distance matrix
dist_mat <- as.matrix(dist(t(as.matrix(normalised_data)), method = "euclidean"))
superheat(dist_mat)
install.packages("pacman")
setwd("/media/tom/Tom_3TB_HDD_remo/T-cell_clone_RNA-seq/gene_expression")
if("pacman" %in% installed.packages()){
library(pacman)
}else{
install.packages("pacman")
library(pacman)
}
pacman::p_load(ggplot2, reshape2, superheat, factoextra)
#read in
normalised  <- read.table("gene_FPKQ_Cardiff.txt", header = TRUE)
gene_counts <- read.table("gene_Counts_Cardiff.txt", header = TRUE)
groups      <- colnames(normalised)[2:ncol(normalised)]
#Boxplot just to see what's going on
melt <- melt(normalised)
colnames(melt) <- c("ID", "clone", "FPKQ")
ggplot(melt, aes(x=clone, y=log2(FPKQ)))+
geom_boxplot(aes(fill=clone))
#Heatmap for a bit of a look
normalised_data <- normalised[,2:6]
normalised_gene <- normalised[,1]
#PCA
res.pca <- prcomp(as.data.frame(t(normalised_data)))
fviz_eig(res.pca)
pca_mat <- as.data.frame(res.pca$x)
pca_mat$clone <- rownames(pca_mat)
ggplot(pca_mat, aes(x=PC1, y=PC2, color=clone))+
geom_point()
#distance matrix
dist_mat <- as.matrix(dist(t(as.matrix(normalised_data)), method = "euclidean"))
superheat(dist_mat)
#density of reads
ggplot(melt, aes(log2(FPKQ), fill = clone, colour = clone)) +
geom_density(alpha = 0.1)
#remove full zeros
nozero_data <- normalised_data[rowSums(normalised_data) > 0,]
superheat(as.data.frame(nozero_data))
normalised$average <- rowSums(normalised[,2:6]) / 5
#plot normalised average distribution
ggplot(normalised, aes(log2(average), fill=average, color=average))+
geom_density(alpha=1)
?p_load
p_loaded
p_loaded()
install.packages("epitomeSim", repos = NULL, type="source")
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(combined) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
#pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
lowest <- pfam %>%
group_by("PFAM_ID", "query_ID") %>%
top_n(-1)
View(lowest)
head(group_by("PFAM_ID", "query_ID"))
pfam %>% group_by("PFAM_ID", "query_ID")
head(pfam)
pfam %>% group_by("PFAM_ID", "query_ID", "score")
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
#pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.5,]
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.05,]
pfam <- pfam %>%
group_by(PFAM_ID, query_ID)
View(pfam)
?top_n
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.05,]
#group on two IDs and count
pfam <- pfam %>%
group_by(PFAM_ID, query_ID) %>%
top_n(1, score)
View(pfam)
library(plyr)
plyr::count(query_ID, pfam)
?plyr::count
plyr::count(pfam, query_ID)
plyr::count(pfam, query_protein)
plyr::count(pfam, "query_protein")
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.05,]
#group on two IDs and count
pfam <- pfam %>%
group_by(PFAM_ID, query_protein) %>%
top_n(1, score)
head(pfam)
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.05,]
#group on two IDs and count
pfam <- pfam %>%
group_by(query_protein) %>%
top_n(1, score)
View(pfam)
unique(pfam$query_protein)
cdount(pfam, "query_protein")
count(pfam, "query_protein")
x <- count(pfam, "query_protein")
View(x)
nrow(x)
View(pfam)
x <-  pfam %>%
group_by(query_protein)
x
y <- pfam %>%
group_by(query_protein) %>%
top_n(1, score)
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.05,]
#group on two IDs and count
pfam <- pfam %>%
group_by(query_protein) %>%
top_n(n=1, wt=score)
View(pfam)
setwd("/media/tom/Tom_3TB_HDD_remo/universal/analysis/kmers/pfam")
library(dplyr)
library(ggplot2)
pfam <- read.csv("combined.csv")
colnames(pfam) <-c ("PFAM_protein", "PFAM_ID", "query_protein",
"query_ID", "E", "score", "bias")
#cut off by E value
pfam <- pfam[pfam$E <= 0.05,]
#group on two IDs and count
top <- pfam %>%
group_by(query_protein) %>%
top_n(n=1, wt=score)
plyr::count(top, )
head(plyr)
head(top)
plyr::count(top, "query_protein")
setwd("~/PycharmProjects/STACEI")
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t")
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = FALSE)
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
View(data)
head(data)
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
data <- data[data$Donor_ResNum %in% c("CDR3a", "CDR3b")]
data$Donor_ResNum
data$Donor_ResNum %in% c("CDR3a", "CDR3b")
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
data <- data[data$Donor_ResNum %in% c("CDR3a", "CDR3b"),]
View(data)
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
data <- data[data$Donor_ResNum %in% c("CDR3a", "CDR3b"),]
data <- data[data$Acceptor_Chain_Letter == "peptide",]
View(data)
head(data)
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
data <- data[data$Donor_ResNum %in% c("CDR3a", "CDR3b"),]
data <- data[data$Acceptor_Chain_Letter == "peptide",]
possible <- data %<%
group_by("Donor_ResNum", "Donor_Annotation", "Donor_Chain") %>%
tally()
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
data <- data[data$Donor_ResNum %in% c("CDR3a", "CDR3b"),]
data <- data[data$Acceptor_Chain_Letter == "peptide",]
possible <- data %>%
group_by("Donor_ResNum", "Donor_Annotation", "Donor_Chain") %>%
tally()
View(possible)
setwd("~/PycharmProjects/STACEI")
data <- read.csv("868_TCR_to_pMHC_contacts_clean.txt", sep="\t", row.names = NULL)
data <- data[data$Donor_ResNum %in% c("CDR3a", "CDR3b"),]
data <- data[data$Acceptor_Chain_Letter == "peptide",]
possible <- data %>%
group_by(Donor_ResNum, Donor_Annotation, Donor_Chain) %>%
tally()
View(possible)
